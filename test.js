'use strict'

const test = require('tape')
const ms = require('.')

test('ms(string)', function (t) {
  run((str, n, msg) => t.is(ms(str), n, msg))
  run((str, n, msg) => t.is(ms(str.toUpperCase()), n, `${msg} (uppercase)`))
  run((str, n, msg) => t.is(ms(str.replace(/ /g, '')), n, `${msg} (no spaces)`))
  run((str, n, msg) => t.is(ms(str.replace(/ /g, '  ')), n, `${msg} (2 spaces)`))

  t.end()

  function run (expect) {
    expect('100', 100, 'no unit')
    expect('0', 0, 'zero')
    expect('100 ms', 100, 'ms to ms')
    expect('0 ms', 0, 'zero ms to ms')
    expect('53 milliseconds', 53, 'milliseconds to ms')
    expect('17 msecs', 17, 'msecs to ms')
    expect('1 s', 1000, 's to ms')
    expect('1 sec', 1000, 'sec to ms')
    expect('1 secs', 1000, 'secs to ms')
    expect('1 second', 1000, 'second to ms')
    expect('1 seconds', 1000, 'seconds to ms')
    expect('1 m', 60000, 'm to ms')
    expect('1 min', 60000, 'min to ms')
    expect('1 mins', 60000, 'mins to ms')
    expect('1 minute', 60000, 'minute to ms')
    expect('1 minutes', 60000, 'minutes to ms')
    expect('1 h', 3600000, 'h to ms')
    expect('1 hr', 3600000, 'hr to ms')
    expect('1 hrs', 3600000, 'hrs to ms')
    expect('1 hour', 3600000, 'hour to ms')
    expect('1 hours', 3600000, 'hours to ms')
    expect('2 d', 172800000, 'd to ms')
    expect('2 day', 172800000, 'day to ms')
    expect('2 days', 172800000, 'days to ms')
    expect('3 w', 1814400000, 'w to ms')
    expect('3 week', 1814400000, 'week to ms')
    expect('3 weeks', 1814400000, 'weeks to ms')
    expect('1 y', 31557600000, 'y to ms')
    expect('0 yr', 0, 'yr to ms')
    expect('2 yrs', 63115200000, 'yrs to ms')
    expect('-3.5 year', -110451600000, 'year to ms')
    expect('2 years', 63115200000, 'years to ms')
    expect('1.5 h', 5400000, 'decimals')
    expect('1.5 hours', 5400000, 'decimals')
    expect('.5 ms', 0.5, 'numbers starting with .')
    expect('-100 ms', -100, 'negative integers')
    expect('-100 milliseconds', -100, 'negative integers')
    expect('-1.5 h', -5400000, 'negative decimals')
    expect('-10.5 h', -37800000, 'negative decimals')
    expect('-1.5 hours', -5400000, 'negative decimals')
    expect('-.5 h', -1800000, 'negative decimals starting with "."')
    expect('-.5 hr', -1800000, 'negative decimals starting with "."')
  }
})

test('ms(number)', function (t) {
  t.is(ms(0), 0)
  t.is(ms(5), 5)
  t.is(ms(-200.5), -200.5)
  t.is(ms(Infinity), Infinity)
  t.is(ms(-Infinity), -Infinity)
  t.end()
})

test('ms(invalid)', function (t) {
  t.ok(Number.isNaN(ms('')), 'empty string')
  t.ok(Number.isNaN(ms()), 'undefined')
  t.ok(Number.isNaN(ms(undefined)), 'undefined')
  t.ok(Number.isNaN(ms(null)), 'null')
  t.ok(Number.isNaN(ms([])), 'array')
  t.ok(Number.isNaN(ms({})), 'object')
  t.ok(Number.isNaN(ms(NaN)), 'NaN')
  t.ok(Number.isNaN(ms('â˜ƒ')), 'unicode')
  t.ok(Number.isNaN(ms('10-.5')), 'invalid number')
  t.ok(Number.isNaN(ms('a10')), 'invalid number')
  t.ok(Number.isNaN(ms('ms 10')), 'invalid number')
  t.ok(Number.isNaN(ms('4invalid')), 'invalid unit')
  t.ok(Number.isNaN(ms('4 invalid')), 'invalid unit')
  t.end()
})
